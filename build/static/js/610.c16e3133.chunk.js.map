{"version":3,"file":"static/js/610.c16e3133.chunk.js","mappings":"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","sources":["pages/ContactUsPage/ContactUsDetail/ContactUsDetail.js","pages/ContactUsPage/ContactUsPage.js"],"sourcesContent":["// importing FontAwesomeIcon package\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// importing useEffect, useState hooks\r\nimport React, { useEffect, useState } from 'react';\r\n// importing fetchApi component\r\nimport { fetchApi } from '../../../utils/fetchApi';\r\n// import ProductDetail from './ProductDetail/ProductDetail';\r\n\r\n// Fn comp with anonymous function\r\n// comp can have js, jsx and css (optional)\r\nconst ContactUsDetail = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isError, setIsError] = useState(true);\r\n  const [products, setProducts] = useState({});\r\n\r\n  useEffect(() => {\r\n    // aft the initial rendering this callback fn wll be called\r\n    // whats the API URL? https://jsonplaceholder.typicode.com/users\r\n    // whats the REST API Client Tool? fetch\r\n    // Whats the http Method? GET\r\n    fetchApi('http://localhost:5000/contactData', 'GET')\r\n      .then((resInJson) => {\r\n        // capturing converted JSON res.\r\n        console.log(resInJson);\r\n        if (resInJson.statusCode !== 404) {\r\n          setProducts(resInJson);\r\n          setIsError(false);\r\n        } else {\r\n          setProducts([]);\r\n          setIsError(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setIsError(true);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return <div className='spinner-border text-success'></div>;\r\n  }\r\n\r\n  if (isError) {\r\n    return <div className='alert-alert-danger'>Some Error Occurred. Try again later.</div>;\r\n  }\r\n\r\n  // must return jsx\r\n  return (\r\n    <div className='mt-4 col-md-5  ms-5 mx-0'>\r\n      <h2 data-testid='contactUsHeading'>Contact Us</h2>\r\n      <p data-testid='contactUsContent' className='lorem-text'>\r\n        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has\r\n        been the industry standard dummy text ever since the 1500s, when an unknown printer took a\r\n        galley of type and scrambled it to make a type specimen book. It has survived not only five\r\n        centuries, but also the leap into electronic typesetting, remaining essentially unchanged.\r\n      </p>\r\n      {/* fetching contact-details using GET method  */}\r\n      <div className='contact-us-wrapper'>\r\n        <FontAwesomeIcon icon='fa-solid fa-map' className='me-2' />\r\n        {/* fetching the address */}\r\n        <h6 className='ms-4 mb-3 pb-1 contact-details contact-address'>{products.address}</h6>\r\n        <FontAwesomeIcon icon='fa-solid fa-phone' className='me-2' />\r\n        {/* fetching the phone numbers */}\r\n        <h6 className='ms-4 mb-4 contact-details phone-number'>{products.phone[0]}</h6>\r\n        <h6 className='ms-4 mb-3 contact-details'>{products.phone[1]}</h6>\r\n        <FontAwesomeIcon icon='fa-regular fa-envelope' className='me-2' />\r\n        {/* fetching the email */}\r\n        <h6 className='ms-4 mb-3 contact-details'>{products.email}</h6>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactUsDetail;\r\n","// importing useState hook\r\nimport { useState } from 'react';\r\n// importing HelmetSetup component\r\nimport HelmetSetup from '../../components/HelmetSetup/HelmetSetup';\r\n// importing react hook form\r\nimport { useForm } from 'react-hook-form';\r\n// importing scss file\r\nimport './ContactUsPage.scss';\r\n// importing ContactUs component\r\nimport ContactUsDetail from './ContactUsDetail/ContactUsDetail';\r\n\r\n// Fn comp with anonymous function\r\n// comp can have js, jsx and css (optional)\r\nconst ContactUsPage = () => {\r\n  const [isError, setIsError] = useState(false);\r\n  const [isSaved, setIsSaved] = useState(false);\r\n  const [getInTouchData, setGetInTouchData] = useState({\r\n    name: '',\r\n    email: '',\r\n    message: ''\r\n  });\r\n  const { register, handleSubmit, reset } = useForm();\r\n\r\n  // handling the onsubmit event\r\n  const onSubmit = (event) => {\r\n    getInTouchData.name = event.fullName;\r\n    getInTouchData.email = event.email;\r\n    getInTouchData.message = event.message;\r\n    setGetInTouchData({ ...getInTouchData });\r\n    fetch('http://localhost:5000/getInTouchData', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(getInTouchData)\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((resInJson) => {\r\n        // capturing converted JSON res.\r\n        console.log(resInJson);\r\n        if (resInJson.statuscode !== 404) {\r\n          setIsSaved(true);\r\n          setTimeout(() => setIsSaved(false), 2000);\r\n          setIsError(false);\r\n        } else {\r\n          setIsError(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setIsError(true);\r\n        setTimeout(() => setIsError(false), 2000);\r\n      })\r\n      .finally(() => {});\r\n\r\n    // resetting the input field values\r\n    reset({ fullName: '', email: '', message: '' });\r\n    // console.log(setIsSaved);\r\n  };\r\n\r\n  // must return JSX\r\n  return (\r\n    <div className='d-flex mt-5 mb-4 contactUs-wrapper'>\r\n      {/* integrating helmetSetup comp  */}\r\n      <HelmetSetup title='Contact Us' />\r\n      {/* integrating ContactUs comp  */}\r\n      <ContactUsDetail />\r\n      <div className='contact-form mt-4 pt-1 mb-2 mx-5'>\r\n        <div className='row for-margin'>\r\n          <div className='col-md-12'>\r\n            {/* form input starts here */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <div className='mb-3'>\r\n                {/* name input field */}\r\n                <label htmlFor='nameInput' className='form-label'>\r\n                  Name\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  {...register('fullName')}\r\n                  className='form-control'\r\n                  name='fullName'\r\n                  id='nameInput'\r\n                  required\r\n                />\r\n              </div>\r\n              <div className='mb-3'>\r\n                {/* Email input field */}\r\n                <label htmlFor='emailInput' className='form-label'>\r\n                  Email\r\n                </label>\r\n                <input\r\n                  type='email'\r\n                  {...register('email')}\r\n                  className='form-control'\r\n                  name='email'\r\n                  id='emailInput'\r\n                  required\r\n                />\r\n              </div>\r\n              <div className='mb-3'>\r\n                {/* Message input field */}\r\n                <label htmlFor='message' className='form-label'>\r\n                  Message\r\n                </label>\r\n                <textarea\r\n                  {...register('message')}\r\n                  className='form-control'\r\n                  id='message'\r\n                  rows='4'\r\n                  name='message'\r\n                  required\r\n                />\r\n              </div>\r\n              {/* send message btn */}\r\n              <button type='submit' className='btn btn-primary mt-2 mb-4' data-testid='submitForm'>\r\n                Send Message\r\n              </button>\r\n              {isSaved\r\n                ? (\r\n                <div className='alert alert-success' data-testid='saveText'>\r\n                  Saved Successfully!\r\n                </div>\r\n                  )\r\n                : (\r\n                    ''\r\n                  )}\r\n              {isError\r\n                ? (\r\n                <div className='alert alert-danger'>Some Error Occurred. Try again Later!</div>\r\n                  )\r\n                : (\r\n                    ''\r\n                  )}\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactUsPage;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","isError","setIsError","_useState5","_useState6","products","setProducts","useEffect","fetchApi","then","resInJson","console","log","statusCode","catch","err","finally","_jsx","className","children","_jsxs","FontAwesomeIcon","icon","address","phone","email","isSaved","setIsSaved","name","message","getInTouchData","setGetInTouchData","_useForm","useForm","register","handleSubmit","reset","HelmetSetup","title","ContactUsDetail","onSubmit","event","fullName","_objectSpread","fetch","method","headers","body","JSON","stringify","res","json","statuscode","setTimeout","htmlFor","type","id","required","rows"],"sourceRoot":""}